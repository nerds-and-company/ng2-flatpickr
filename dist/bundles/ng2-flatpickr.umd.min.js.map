{"version":3,"sources":["ng://ng2-flatpickr/src/ng2-flatpickr.component.ts","ng://ng2-flatpickr/src/ng2-flatpickr.directive.ts","ng://ng2-flatpickr/src/ng2-flatpickr.module.ts"],"names":["i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵelementEnd","i0.ɵɵclassMapInterpolate1","i0.ɵɵproperty","ctx_r1","tabindex","Ng2FlatpickrComponent","_this","this","_tabindex","onTouchedFn","defaultFlatpickrOptions","wrap","clickOpens","onChange","selectedDates","writeValue","placeholder","addClass","hideButton","propagateChange","_","Object","defineProperty","prototype","ti","Number","value","registerOnChange","fn","registerOnTouched","setDateFromInput","date","flatpickrElement","nativeElement","_flatpickr","setDate","setAltInputPlaceholder","altInput","setAttribute","ngAfterViewInit","config","assign","flatpickr","ngOnChanges","changes","hasOwnProperty","currentValue","onFocus","event","selectors","viewQuery","rf","ctx","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","core","ɵɵNgOnChangesFeature","ngContentSelectors","_c1","decls","vars","consts","template","i0.ɵɵtemplate","i0.ɵɵprojection","i0.ɵɵadvance","Ng2FlatpickrDirective","parent","ngControl","element","renderer","flatpickrOnChange","EventEmitter","flatpickrOnClose","flatpickrOnOpen","flatpickrOnReady","onClick","toggle","formDirective","getControl","flatpickrOptions","parentNode","flatpickrAltInput","ngOnDestroy","destroy","formControlListener","unsubscribe","undefined","ngOnInit","globalOnChange","globalOnClose","onClose","globalOnOpen","onOpen","globalOnReady","onReady","altFormat","getOption","altInputClass","allowInput","appendTo","dateFormat","defaultDate","disable","disableMobile","enable","enableTime","enableSeconds","hourIncrement","inline","locale","maxDate","minDate","minuteIncrement","mode","nextArrow","noCalendar","eventOnChange","bind","eventOnClose","eventOnOpen","eventOnReady","parseDate","prevArrow","shorthandCurrentMonth","static","time_24hr","utc","weekNumbers","keys","forEach","key","control","valueChanges","subscribe","Date","setValue","onlySelf","emitEvent","emitModelToViewChange","emitViewToModelChange","dateStr","instance","emit","option","defaultValue","localName","substring","toUpperCase","ɵɵdirectiveInject","forms","ControlContainer","NgControl","ElementRef","Renderer2","hostBindings","Ng2FlatpickrModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Component, ViewChild, AfterViewInit, forwardRef, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\ndeclare var require: any;\n\nif(typeof window !== 'undefined'){\n    require( 'flatpickr' );\n}\n\n@Component({\n\tselector: 'ng2-flatpickr',\n\ttemplate: `\n\t\t<div class=\"ng2-flatpickr-input-container\" #flatpickr>\n\t\t\t<input *ngIf=\"!hideButton\" class=\"ng2-flatpickr-input {{ addClass }}\" [placeholder]=\"placeholder\" [tabindex]=\"tabindex\" type=\"text\" (focus)=\"onFocus($event)\" data-input>\n\t\t\t<ng-content></ng-content>\n\t\t</div>\n\t\t`,\n\tproviders: [\n\t\t{\n\t\t\tprovide: NG_VALUE_ACCESSOR,\n\t\t\tuseExisting: forwardRef( () => Ng2FlatpickrComponent ),\n\t\t\tmulti: true\n\t\t}\n\t]\n})\nexport class Ng2FlatpickrComponent implements AfterViewInit, ControlValueAccessor, OnChanges {\n\n  \tpublic flatpickr: Object;\n  \tprivate _tabindex = 0;\n\tonTouchedFn: Function = () => { };\n\n\tprivate defaultFlatpickrOptions: FlatpickrOptions = {\n\t\twrap: true,\n\t\tclickOpens: true,\n\t\tonChange: ( selectedDates: any ) => { this.writeValue( selectedDates ); }\n\t};\n\n\t@ViewChild('flatpickr', {\n\t\tstatic: true\n\t})\n\tflatpickrElement: any;\n\n\t@Input()\n\tconfig: FlatpickrOptions;\n\n\t@Input()\n\tplaceholder: string = \"\";\n\n \t@Input()\n\taddClass: string = \"\";\n\n\t@Input()\n\tsetDate: string | Date;\n\n\t@Input()\n\tget tabindex() { return this._tabindex; }\n\tset tabindex( ti: number ) { this._tabindex = Number( ti ); }\n\n\t@Input()\n\thideButton = false;\n\n\t///////////////////////////////////\n\n\twriteValue( value:any ) {\n\t\tthis.propagateChange( value );\n\t}\n\n\tregisterOnChange( fn: any ) {\n\t\tthis.propagateChange = fn;\n\t}\n\n\tregisterOnTouched(fn: any): void {\n\t\tthis.onTouchedFn = fn;\n\t}\n\n\tpropagateChange = ( _: any ) => {};\n\n\t///////////////////////////////////\n\n\tsetDateFromInput( date: any ) {\n\t\tthis.flatpickrElement.nativeElement._flatpickr.setDate( date, true );\n\t}\n\n\tsetAltInputPlaceholder( placeholder: string ) {\n\t\tthis.flatpickrElement.nativeElement._flatpickr.altInput.setAttribute( 'placeholder', placeholder );\n\t}\n\n\tngAfterViewInit() {\n\t\tif( this.config ) {\n\t\t\tObject.assign( this.defaultFlatpickrOptions, this.config );\n\t\t}\n\t\tif( this.flatpickrElement.nativeElement.flatpickr ) {\n\t\t\tthis.flatpickr = this.flatpickrElement.nativeElement.flatpickr( this.defaultFlatpickrOptions );\n\t\t}\n\t\tif( this.setDate ) {\n\t\t\tthis.setDateFromInput( this.setDate );\n\t\t}\n\t}\n\n\tngOnChanges( changes: SimpleChanges ) {\n\t\tif( this.flatpickrElement.nativeElement \n\t\t\t&& this.flatpickrElement.nativeElement._flatpickr ) {\n\t\t\t\t\n\t\t\t\tif( changes.hasOwnProperty( 'setDate' ) \n\t\t\t\t\t&& changes[ 'setDate' ].currentValue ) {\n\t\t\t\t\t\tthis.setDateFromInput( changes[ 'setDate' ].currentValue );\n\t\t\t\t\t}\n\n\t\t\t\tif( this.config.altInput\n\t\t\t\t\t&& changes.hasOwnProperty( 'placeholder' ) \n\t\t\t\t\t&& changes[ 'placeholder' ].currentValue ) {\n\t\t\t\t\t\tthis.setAltInputPlaceholder( changes[ 'placeholder' ].currentValue );\n\t\t\t\t\t}\n\t\t\t}\n\t}\n\t\n\tonFocus(event: any) {\n\t\tthis.onTouchedFn();\n\t}\n}\n","import {\n\tAfterViewInit, Directive, ElementRef, EventEmitter, HostListener, Input,\n\tOnDestroy, OnInit, Output, Renderer2, SimpleChanges, OnChanges\n} from '@angular/core';\nimport { ControlContainer, FormControl, NgControl } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { FlatpickrEvent } from './flatpickr-event.interface';\nimport { FlatpickrInstance } from './flatpickr-instance';\nimport { FlatpickrOptions } from './flatpickr-options.interface';\n\n@Directive({ selector: '[flatpickr]', exportAs: 'ng2-flatpickr' })\nexport class Ng2FlatpickrDirective implements AfterViewInit, OnDestroy, OnInit, OnChanges {\n\t/**\n\t * The flatpickr configuration as a single object of values.\n\t *\n\t * See https://chmln.github.io/flatpickr/options/ for full list.\n\t */\n\t@Input( 'flatpickr' ) public flatpickrOptions: FlatpickrOptions;\n\n\t/**\n\t * Placeholder for input field.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'placeholder' ) public placeholder: string;\n\n\t/**\n\t * Exactly the same as date format, but for the altInput field.\n\t *\n\t * Default:  \"F j, Y\"\n\t */\n\t@Input( 'altFormat' ) public flatpickrAltFormat: string;\n\n\t/**\n\t * Show the user a readable date (as per altFormat), but return something\n\t * totally different to the server.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'altInput' ) public flatpickrAltInput: boolean;\n\n\t/**\n\t * This class will be added to the input element created by the altInput\n\t * option.\n\t *\n\t * Default:  \"\"\n\t */\n\t@Input( 'altInputClass' ) public flatpickrAltInputClass: string;\n\n\t/**\n\t * Allows the user to enter a date directly input the input field. By\n\t * default, direct entry is disabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'allowInput' ) public flatpickrAllowInput: boolean;\n\n\t/**\n\t * Instead of body, appends the calendar to the specified node instead.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'appendTo' ) public flatpickrAppendTo: any; // HTMLElement\n\n\t/**\n\t * Whether clicking on the input should open the picker.\n\t * You could disable this if you wish to open the calendar manually\n\t * with.open().\n\t *\n\t * Default:  true\n\t */\n\t@Input( 'clickOpens' ) public flatpickrClickOpens: boolean;\n\n\t/**\n\t * A string of characters which are used to define how the date will be\n\t * displayed in the input box.\n\t * See https://chmln.github.io/flatpickr/formatting/ for supported tokens.\n\t *\n\t * Default:  \"Y-m-d\"\n\t */\n\t@Input( 'dateFormat' ) public flatpickrDateFormat: string;\n\n\t/**\n\t * Sets the initial selected date(s).\n\t *\n\t * If you're using {mode: \"multiple\"} or a range calendar supply an Array of\n\t * Date objects or an Array of date strings which follow your dateFormat.\n\t *\n\t * Otherwise, you can supply a single Date object or a date string.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'defaultDate' ) public flatpickrDefaultDate: string | Date;\n\n\t/**\n\t * Disable an array of specific dates, date ranges, or functions to disable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-specific-dates\n\t *\n\t * Default:  []\n\t */\n\t@Input( 'disable' ) public flatpickrDisable: string[] | Date[];\n\n\t/**\n\t * Set disableMobile to true to always use the non-native picker. By\n\t * default, Flatpickr utilizes native datetime widgets unless certain\n\t * options (e.g. disable) are used.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'disableMobile' ) public flatpickrDisableMobile: boolean;\n\n\t/**\n\t * Enable an array of specific dates, date ranges, or functions to enable\n\t * dates. See https://chmln.github.io/flatpickr/examples/#disabling-all-dates-except-select-few\n\t *\n\t * Default:  []\n\t */\n\t@Input( 'enable' ) public flatpickrEnable: string[] | Date[];\n\n\t/**\n\t * Enables time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'enableTime' ) public flatpickrEnableTime: boolean;\n\n\t/**\n\t * Enables seconds in the time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'enableSeconds' ) public flatpickrEnableSeconds: boolean;\n\n\t/**\n\t * Adjusts the step for the hour input (incl. scrolling).\n\t *\n\t * Default:  1\n\t */\n\t@Input( 'hourIncrement' ) public flatpickrHourIncrement: number;\n\n\t/**\n\t * Displays the calendar inline.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'inline' ) public flatpickrInline: boolean;\n\n\t/**\n\t * Use a specific locale for the flatpickr instance.\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'locale' ) public flatpickrLocale: Object;\n\n\t/**\n\t * The maximum date that a user can pick to (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'maxDate' ) public flatpickrMaxDate: string | Date;\n\n\t/**\n\t * The minimum date that a user can start picking from (inclusive).\n\t *\n\t * Default:  null\n\t */\n\t@Input( 'minDate' ) public flatpickrMinDate: string | Date;\n\n\t/**\n\t * Adjusts the step for the minute input (incl. scrolling).\n\t *\n\t * Default:  5\n\t */\n\t@Input( 'minuteIncrement' ) public flatpickrMinuteIncrement: number;\n\n\t/**\n\t * \"single\", \"multiple\", or \"range\"\n\t *\n\t * Default:  \"single\"\n\t */\n\t@Input( 'mode' ) public flatpickrMode: string;\n\n\t/**\n\t * HTML for the arrow icon, used to switch months.\n\t *\n\t * Default:  \">\"\n\t */\n\t@Input( 'nextArrow' ) public flatpickrNextArrow: string;\n\n\t/**\n\t * Hides the day selection in calendar. Use it along with enableTime to\n\t * create a time picker.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'noCalendar' ) public flatpickrNoCalendar: boolean;\n\n\t/**\n\t * Function that expects a date string and must return a Date object.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'parseDate' ) public flatpickrParseDate: Function;\n\n\t/**\n\t * HTML for the left arrow icon.\n\t *\n\t * Default:  \"<\"\n\t */\n\t@Input( 'prevArrow' ) public flatpickrPrevArrow: string;\n\n\t/**\n\t * Show the month using the shorthand version (ie, Sep instead of September).\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'shorthandCurrentMonth' ) public flatpickrShorthandCurrentMonth: boolean;\n\n\t/**\n\t * Position the calendar inside the wrapper and next to the input element\n\t * (Leave false unless you know what you're doing).\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'static' ) public flatpickrStatic: boolean;\n\n\t/**\n\t * Displays time picker in 24 hour mode without AM/PM selection when enabled.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'time_24hr' ) public flatpickrTime_24hr: boolean;\n\n\t@Input( 'utc' ) public flatpickrUtc: boolean;\n\n\t/**\n\t * Enables display of week numbers in calendar.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'weekNumbers' ) public flatpickrWeekNumbers: boolean;\n\n\t/**\n\t * Custom elements and input groups.\n\t *\n\t * Default:  false\n\t */\n\t@Input( 'wrap' ) public flatpickrWrap: boolean;\n\n\t/**\n\t * onChange gets triggered when the user selects a date, or changes the time on a selected date.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onChange' ) public flatpickrOnChange: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onClose gets triggered when the calendar is closed.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onClose' ) public flatpickrOnClose: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onOpen gets triggered when the calendar is opened.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onOpen' ) public flatpickrOnOpen: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/**\n\t * onReady gets triggered once the calendar is in a ready state.\n\t *\n\t * Default:  null\n\t */\n\t@Output( 'onReady' ) public flatpickrOnReady: EventEmitter<FlatpickrEvent> = new EventEmitter();\n\n\t/** Allow double-clicking on the control to open/close it. */\n\t@HostListener( 'dblclick' )\n\tpublic onClick() {\n\t\tthis.flatpickr.toggle();\n\t}\n\n\tprotected globalOnChange: Function;\n\tprotected globalOnClose: Function;\n\tprotected globalOnOpen: Function;\n\tprotected globalOnReady: Function;\n\n\tprotected flatpickr: FlatpickrInstance;\n\tprotected formControlListener: Subscription;\n\n\t/** Allow access properties using index notation */\n\t[key:string]: any;\n\n\tconstructor(\n\t\tprotected parent: ControlContainer,\n\t\tprotected ngControl: NgControl,\n\t\tprotected element: ElementRef,\n\t\tprotected renderer: Renderer2\n\t) {}\n\n\tget control(): FormControl {\n\t\treturn this.parent ? this.parent.formDirective.getControl(this.ngControl) : null;\n\t}\n\n\tngAfterViewInit() {\n\t\t/** We cannot initialize the flatpickr instance in ngOnInit(); it will\n\t\t\trandomize the date when the form control initializes. */\n\t\tlet nativeElement = this.element.nativeElement;\n\n\t\tif (typeof nativeElement === 'undefined' || nativeElement === null) {\n\t\t\tthrow 'Error: invalid input element specified';\n\t\t}\n\n\t\tif (this.flatpickrOptions.wrap) {\n\t\t\tthis.renderer.setAttribute( this.element.nativeElement, 'data-input', '' );\n\t\t\tnativeElement = nativeElement.parentNode;\n\t\t}\n\n\t\tthis.flatpickr = <FlatpickrInstance>nativeElement.flatpickr( this.flatpickrOptions );\n\t}\n\n\tngOnChanges( changes: SimpleChanges ) {\n\t\tif( this.flatpickr\n\t\t\t&& this.flatpickrAltInput\n\t\t\t&& changes.hasOwnProperty( 'placeholder' ) \n\t\t\t&& changes[ 'placeholder' ].currentValue ) {\n\t\t\t\tthis.flatpickr.altInput.setAttribute( 'placeholder', changes[ 'placeholder' ].currentValue );\n\t\t\t}\n\t}\n\n\tngOnDestroy() {\n\t\tif (this.flatpickr) {\n\t\t\tthis.flatpickr.destroy();\n\t\t}\n\n\t\tif (this.formControlListener) {\n\t\t\tthis.formControlListener.unsubscribe();\n\t\t\tthis.formControlListener = undefined;\n\t\t}\n\n\t\tthis.flatpickrOnChange = undefined;\n\t\tthis.flatpickrOnClose = undefined;\n\t\tthis.flatpickrOnOpen = undefined;\n\t\tthis.flatpickrOnReady = undefined;\n\t}\n\n\tngOnInit() {\n\t\tthis.globalOnChange = this.flatpickrOptions.onChange;\n\t\tthis.globalOnClose = this.flatpickrOptions.onClose;\n\t\tthis.globalOnOpen = this.flatpickrOptions.onOpen;\n\t\tthis.globalOnReady = this.flatpickrOptions.onReady;\n\n\t\tthis.flatpickrOptions = {\n\t\t\taltFormat: this.getOption('altFormat'),\n\t\t\taltInput: this.getOption('altInput'),\n\t\t\taltInputClass: this.getOption('altInputClass'),\n\t\t\tallowInput: this.getOption('allowInput'),\n\t\t\tappendTo: this.getOption('appendTo'),\n\t\t\tclickOpens: this.getOption('clickOpens', true),\n\t\t\tdateFormat: this.getOption('dateFormat'),\n\t\t\tdefaultDate: this.getOption('defaultDate'),\n\t\t\tdisable: this.getOption('disable'),\n\t\t\tdisableMobile: this.getOption('disableMobile'),\n\t\t\tenable: this.getOption('enable'),\n\t\t\tenableTime: this.getOption('enableTime'),\n\t\t\tenableSeconds: this.getOption('enableSeconds'),\n\t\t\thourIncrement: this.getOption('hourIncrement'),\n\t\t\tinline: this.getOption('inline'),\n\t\t\tlocale: this.getOption('locale'),\n\t\t\tmaxDate: this.getOption('maxDate'),\n\t\t\tminDate: this.getOption('minDate'),\n\t\t\tminuteIncrement: this.getOption('minuteIncrement'),\n\t\t\tmode: this.getOption('mode'),\n\t\t\tnextArrow: this.getOption('nextArrow'),\n\t\t\tnoCalendar: this.getOption('noCalendar'),\n\t\t\tonChange: this.eventOnChange.bind(this),\n\t\t\tonClose: this.eventOnClose.bind(this),\n\t\t\tonOpen: this.eventOnOpen.bind(this),\n\t\t\tonReady: this.eventOnReady.bind(this),\n\t\t\tparseDate: this.getOption('parseDate'),\n\t\t\tprevArrow: this.getOption('prevArrow'),\n\t\t\tshorthandCurrentMonth: this.getOption('shorthandCurrentMonth'),\n\t\t\tstatic: this.getOption('static'),\n\t\t\ttime_24hr: this.getOption('time_24hr'),\n\t\t\tutc: this.getOption('utc'),\n\t\t\tweekNumbers: this.getOption('weekNumbers'),\n\t\t\twrap: this.getOption('wrap', true),\n\t\t};\n\n\t\t// Remove unset properties\n\t\tObject.keys( this.flatpickrOptions ).forEach( ( key: string ) => {\n\t\t\t(this.flatpickrOptions[key] === undefined) &&\n\t\t\t\tdelete this.flatpickrOptions[key];\n\t\t} );\n\n\t\tif (this.control) {\n\t\t\tthis.formControlListener = this.control.valueChanges\n\t\t\t\t.subscribe( ( value: any ) => {\n\t\t\t\t\tif ( !( value instanceof Date ) ) {\n\t\t\t\t\t\t// Quietly update the value of the form control to be a\n\t\t\t\t\t\t// Date object. This avoids any external subscribers\n\t\t\t\t\t\t// from being notified a second time (once for the user\n\t\t\t\t\t\t// initiated event, and once for our conversion to\n\t\t\t\t\t\t// Date()).\n\t\t\t\t\t\tthis.control.setValue( new Date( '' + value ), {\n\t\t\t\t\t\t\tonlySelf: true,\n\t\t\t\t\t\t\temitEvent: false,\n\t\t\t\t\t\t\temitModelToViewChange: false,\n\t\t\t\t\t\t\temitViewToModelChange: false\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onChange callback, if defined.\n\t */\n\tprotected eventOnChange( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnChange ) {\n\t\t\tthis.flatpickrOnChange.emit( event );\n\t\t}\n\t\tif( this.globalOnChange ) {\n\t\t\tthis.globalOnChange( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onClose callback, if defined.\n\t */\n\tprotected eventOnClose( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnClose ) {\n\t\t\tthis.flatpickrOnClose.emit( event );\n\t\t}\n\t\tif( this.globalOnClose ) {\n\t\t\tthis.globalOnClose( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onOpen callback, if defined.\n\t */\n\tprotected eventOnOpen( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnOpen ) {\n\t\t\tthis.flatpickrOnOpen.emit( event );\n\t\t}\n\t\tif( this.globalOnOpen ) {\n\t\t\tthis.globalOnOpen( event );\n\t\t}\n\t}\n\n\t/**\n\t * Fire off the event emitter for the directive element, and also for the\n\t * global onReady callback, if defined.\n\t */\n\tprotected eventOnReady( selectedDates: Date[], dateStr: string, instance: Object ): void {\n\t\tlet event: FlatpickrEvent = {\n\t\t\tselectedDates: selectedDates,\n\t\t\tdateStr: dateStr,\n\t\t\tinstance: instance\n\t\t};\n\t\tif ( this.flatpickrOnReady ) {\n\t\t\tthis.flatpickrOnReady.emit( event );\n\t\t}\n\t\tif( this.globalOnReady ) {\n\t\t\tthis.globalOnReady( event );\n\t\t}\n\t}\n\n\t/**\n\t * Return the configuration value for option {option}, or {defaultValue} if it\n\t * doesn't exist.\n\t */\n\tprotected getOption( option: string, defaultValue?: any ): any {\n\t\tlet localName = 'flatpickr' + option.substring( 0, 1 ).toUpperCase()\n\t\t\t+ option.substring( 1 );\n\n\t\tif ( typeof this[localName] !== 'undefined' ) {\n\t\t\treturn this[localName];\n\t\t} else if ( typeof this.flatpickrOptions[option] !== 'undefined' ) {\n\t\t\treturn this.flatpickrOptions[option];\n\t\t} else {\n\t\t\treturn defaultValue;\n\t\t}\n\t}\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Ng2FlatpickrComponent } from './ng2-flatpickr.component';\nimport { Ng2FlatpickrDirective } from './ng2-flatpickr.directive';\nimport 'flatpickr';\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ],\n    exports: [\n        Ng2FlatpickrComponent,\n        Ng2FlatpickrDirective\n    ]\n})\nexport class Ng2FlatpickrModule {\n}"]}